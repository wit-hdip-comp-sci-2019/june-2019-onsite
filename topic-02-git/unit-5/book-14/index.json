


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "14: Under the Covers",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Gaining a deeper understanding of Git and its components</p>",
  "folder" : "book-14",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Under the Covers",
    "shortTitle": "14: Under the Covers",
    "contentMd" : "# Under the Covers\n\nGaining a deeper understanding of Git and its components\n\n```bash\n$ tree -L 1 ./.git\n./.git\n├── branches\n├── COMMIT_EDITMSG # Text of most recent commit message\n├── config         # Local configuration specific to this repo\n├── description\n├── FETCH_HEAD     # Info about what was fetched from remotes\n├── HEAD           # Special ref that points to current ref in ./git/refs\n├── hooks          # Dir containing scripts that run at specific events\n├── index          # Binary representation of the index/cache/staging area\n├── info           \n├── logs           # Dir containing info used by reflog\n├── objects        # Dir containing all \"objects\" (loose or packed)\n├── ORIG_HEAD\n├── packed-refs    # (compressed)\n├── refs           # Branch, tag, remote, stash info\n└── rr-cache\n```\n\n* The stuff outside the .git directory is the checked-out working directory.\n* Only .git contents (expanded) exist on server: bare repo.\n"
    },
  
    {
    "title": "# COMMIT_EDITMSG",
    "shortTitle": "COMMIT_EDITMSG",
    "contentMd" : "# COMMIT_EDITMSG\n\n`COMMIT_EDITMSG` can be useful with the hub command to create a pull-request on github with a single command\n\n```bash\n# Create a PR against master branch of the repo in the feedhenry org\n# with the contents of the most recent commit message as the description\ngit pull-request -b feedhenry:master -F ./.git/COMMIT_EDITMSG\n```"
    },
  
    {
    "title": "# Git objects - what are they?",
    "shortTitle": "Objects",
    "contentMd" : "# Git objects - what are they?\n\n* Blob - Think of blobs as file contents (deflated) with a size & type header.\n* Tree - Trees refer to blobs (and other trees), similar to how a directory points to files (and child directories).\n* Commit - Commits consist of a tree, parent commits, metadata (message, author details, time, etc).\n* Tag - An annotated tag is an object type that points to another object, and contains metadata such as timestamp, tag name, description, tagger and gpgsig. Most commonly refers to a commit.\n\n## Inspecting Objects with git cat-file\n\n```bash\n# What type of object is it?\n$ git cat-file -t $(git rev-parse HEAD)\ncommit\n\n# What size is it (in bytes)?\n$ git cat-file -s e29b7eef219e38d005b1360214322a336a56729e\n1079\n\n# Pretty-print it\n$ git cat-file -p $(git rev-parse HEAD)^\ntree 2320f5bb8cf059571ed69d705ba792c7939296f5\nparent e67aeb6f2a1c521f62106ede0b53f3a30ce57a36\nparent d4c13babe4fb19550455d96cd067a19f745d999e\nauthor Jason Madigan <jmadigan@redhat.com> 1480413570 +0000\ncommitter GitHub <noreply@github.com> 1480413570 +0000\n\nMerge pull request #2 from fheng/readme-updates\n\nREADME updates\n```"
    },
  
    {
    "title": "# Crazy example with no files or porcelain commands",
    "shortTitle": "Porcelain",
    "contentMd" : "# Crazy example with no files or porcelain commands\n\nPorcelain provides a more user-friendly interface to the plumbing\nhttps://git.io/v1Bt5\n\n```bash\n# Create a new branch from master & checkout\ngit co -b ungit master\n\n# Make a new blob object\nblob_sha1=$(echo \"Let's ungit\" | git hash-object -w --stdin)\n\n# Add the blob as a file in the index\ngit update-index --add --cacheinfo 100644 ${blob_sha1} ungit.txt\n\n# Make a tree object from the current index\ntree_sha1=$(git write-tree)\n\n# Make a commit object with the newly-created tree\ncommit_sha1=$(echo \"Ungit all the things\" | git commit-tree -p HEAD ${tree_sha1})\n\n# Update the current branch with that new commit\ngit merge ${commit_sha1}\n\n# WTF, where's my ungit.txt?!\nls && git status\n```\n"
    },
  
    {
    "title": "# Reflog - git's safety net",
    "shortTitle": "Reflog",
    "contentMd" : "# Reflog - git's safety net\n\nGit commands that change the state of the local repo will write an entry to the reflog\n\n```bash\ngit reflog # git log -g --abbrev-commit --pretty=oneline\na21f4c4 HEAD@{0}: merge a21f4c412fa194021faa859193380a26b54a024d: Fast-forward\nc838b24 HEAD@{1}: merge c838b2447de706f53eaabed16c371abbb6d82b03: Fast-forward\ne29b7ee HEAD@{2}: checkout: moving from cp-conflict-example to ungit\nbf196ea HEAD@{3}: commit (cherry-pick): Bumping version to 2.0.8\ne29b7ee HEAD@{4}: checkout: moving from cp-example to cp-conflict-example\nb2d9004 HEAD@{5}: checkout: moving from master to cp-example\ne29b7ee HEAD@{6}: checkout: moving from cp-example to master\nb2d9004 HEAD@{7}: cherry-pick: name change\ne29b7ee HEAD@{8}: checkout: moving from master to cp-example\ne29b7ee HEAD@{9}: clone: from git@github.com:fheng/git-tutorial.git\n\n# Checkout a previous state\ngit checkout HEAD@{2} # detached head, consider creating a branch here if important\n\n# Reset current branch to an earlier state\ngit reset [--hard] HEAD@{4}\n```"
    }
  
  ]
  }

