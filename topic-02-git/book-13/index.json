


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "13: Bisecting",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Finding commits within your project.</p>",
  "folder" : "book-13",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Bisecting",
    "shortTitle": "13: Bisecting",
    "contentMd" : "# Bisecting\n\nFinding commits within your project.\n\n* git bisect helps you figure out when breaking changes were introduced\n* Uses a binary-search between one changeset and another to quickly narrow breakage to a single commit\n"
    },
  
    {
    "title": "# Practical",
    "shortTitle": "Practical",
    "contentMd" : "# Practical\n\nIn the `git-tutorial` repo:\n\n```bash\ngit checkout bisect\n# Our bisect branch is a little ahead of of master (500 commits)\n# At some point, a commit slipped in that means our app doesn't start\n# and our tests fail.\n# Lets use git bisect to find the broken commit\ngit bisect start\n# Step 1 - find a commit where things are working\n# I have no idea, so lets cast a wide net (across 500 commits)\ngit bisect good cddd186 # update to 3.0.0\ngit bisect bad bf0c5b1  # update to 502.0.0\n# Run `npm test` to see if our tests fail\n# If they fail - run `git bisect bad`\n# If they pass - run `git bisect good`\n# When done, reset via `git bisect reset` & patch the bug\n```"
    }
  
  ]
  }

